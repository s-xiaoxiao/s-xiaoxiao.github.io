<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>笑笑</title>
    <link>https://sunxiaochuang.top/</link>
    <description>Recent content on 笑笑</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 30 Nov 2019 16:17:36 +0800</lastBuildDate>
    
	<atom:link href="https://sunxiaochuang.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>手写DOM库 </title>
      <link>https://sunxiaochuang.top/posts/%E5%B0%81%E8%A3%85dom%E5%BA%93/</link>
      <pubDate>Sat, 30 Nov 2019 16:17:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/%E5%B0%81%E8%A3%85dom%E5%BA%93/</guid>
      <description>前言 上篇 blog,我们学习了 DOM (Document Object model)操作.但是每个 API 的名字实在是有点长.这次我们把哪些 JS 本身的 API 给封装成一个库供大家便利。,
全局对象 window.dom = {} //我们提供一个全局对象供我们调用  增(Create) dom.create = (node){ //新增节点 const container = document.createElement(&#39;template&#39;); container.innerHTML = node.trim() return template.content.firstChild } //Document.createElement() 方法 :创建由tagName指定的HTML元素 //&amp;lt;template&amp;gt;&amp;lt;/template&amp;gt; 内容模板元素,改内容在加载页面时不会呈现,但随后可以在运行时使用JavaScript实例化 //Element.innerHTML 属性：设置或获取HTML语法表示的元素的后代 //String.prototype.trim() 方法：会从一个字符串的两端删除空白字符.上下文中的空白字符是所有的空白字符(space,tab,no-break space等) //HTMLTemplateElement.content 属性 :返回&amp;lt;template&amp;gt;元素的模板内容 //Node.firstChild : 只读属性返回树中节点的第一个子节点,如果节点是无子节点,则返回null dom.after = (node,node2){ //新增弟弟 node.parentNode.insertBefore(node2,node.nextSibling) } //Node.parentNode 属性 : 返回指定的节点在DOM树中的父节点 //Node.insertBefore() 方法 ：方法在参考节点之前插入一个拥有指定父节点的子节点.如果给定的子节点是对文档中现有节点的引用,insertBefore()会将其从当前位置移动到新位置 //Node.nextSibling : 返回与该节点同级的下一个节点Node,如果没有返回null dom.before=(node,node2){ //新增哥哥 node.parentNode.insertBefore(node2,node); } //Node.</description>
    </item>
    
    <item>
      <title>DOM编程</title>
      <link>https://sunxiaochuang.top/posts/dom%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Thu, 28 Nov 2019 15:09:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/dom%E7%BC%96%E7%A8%8B/</guid>
      <description>title: &amp;ldquo;DOM编程&amp;rdquo; date: 2019-11-28T15:09:36+08:00
draft: false title: &amp;ldquo;DOM编程&amp;rdquo; date: 2019-11-28T15:09:36+08:00
draft: false 前言 //在进行认识DOM开始之前呢,希望你有如下知识: 1. JS语法,如变量、if else、循环 2. JS的其中数据类型: Number String Bool Symbol Null Undefined Object 3. 五个falsy值: 0 NaN &#39;&#39; null undefined 4. 函数是对象,数组也是对象 5. div和span标签 6. Css布局：flex   什么是 falsy 值？ 在 Bool 上下文中认定为 false 的值
 1. 什么是 DOM(Document Object Model 文档对象模型) 1 . 网页里的各种标签按照数据结构来看是一个树的结构.(Document)
&amp;lt;!doctype html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;我是第三层&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div&amp;gt;我是第三层&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>数据结构-上</title>
      <link>https://sunxiaochuang.top/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8A/</link>
      <pubDate>Mon, 25 Nov 2019 19:45:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8A/</guid>
      <description>数据结构(上)  队列 栈 链表 哈希表 树  队列(Queue)(FIFO):First-In First-Out 先入先出 队列实例 : 取号先进叫号先出
 取号 1 ){document.querySelector(&#39;#screen&#39;).innerText = `请 ${queue.shift.call(queue)}号就餐`;document.querySelector(&#39;#queue&#39;).innerText = JSON.stringify(queue)}else if(queue.length === 1){document.querySelector(&#39;#screen&#39;).innerText = `请 ${queue.shift.call(queue)}号就餐`;document.querySelector(&#39;#queue&#39;).innerText = JSON.stringify(queue);document.querySelector(&#39;#newNumber&#39;).innerText=n=0}else{document.querySelector(&#39;#newNumber&#39;).innerText=0;}&#34;叫号 当前号码：0 当前队列：  let n = 0 let queue = [] console.log(queue);  //const : 常量块级作用域,很像使用let语句定义的变量。常量的值不能通过重新赋值来改变,并且不能重新声明 //document.querySelector() : 返回文档中与指定选择器或选择器匹配的第一个html元素element。如果找不 // 到匹配项,则返回null //innerText : 属性表示一个节点及其后代的“渲染”文本内容 //JSON.stringify() ：方法将一个JavaScript值(对象或者数组)转换为一个JSON字符串, //Array.prototype.push() : 方法是将一个或多个元素添加到数组的末尾,并返回数组的新长度  栈(stack)(LIFO):Last In First Out 后进后出 let result = 0 let recursion = numbers =&amp;gt;{ if(numbers&amp;lt;=100){ return recursion((result+=numbers,++numbers)) }else{ return result } } recursion(1) //5050 //递归的步骤是怎么做的？调用函数时,在一个数组里进行压栈直到numbers等于101时。 //返回result并且把之前调用函数栈逐一释放,后进后出  链表(Linked List) 链表在 JS 里主要体现在对象里</description>
    </item>
    
    <item>
      <title>算法入门-下</title>
      <link>https://sunxiaochuang.top/posts/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E4%B8%8B/</link>
      <pubDate>Sat, 23 Nov 2019 18:57:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E4%B8%8B/</guid>
      <description>四种排序 选择排序 快速排序 归并排序 计数排序
选择排序(循环) 思路:每次查找最小值,拿最小值的索引下标跟数组升序下标逐步交换.
//交换 let swap = (array,i,j) =&amp;gt;{ let temp = array[i]; array[i]=array[j]; array[j]=temp; } //寻找最小值索引 let minIndex = (numbers) =&amp;gt;{ let index = 0; for(let i=1;i&amp;lt;numbers.length;i++){ if(numbers[i]&amp;lt;numbers[index]){ index = i; } } return index; } //选择排序(从小到大) let sort = (numbers) =&amp;gt;{ for(let i=0;i&amp;lt;numbers.length-1;i++){ let index = minIndex(numbers.slice(i))+i if(index!==i){ swap(numbers,index,i) } } return numbers; } //slice()：方法是 Array.prototype.slice();返回一个新对象, //这一对象是由一个begin和end决定的原数组的浅拷贝(包含begin,不包含end)。原始数组不会被改变  快速排序(quick sort)(递归) let quickSort = arr =&amp;gt;{ if(arr.</description>
    </item>
    
    <item>
      <title>太极图技术记录</title>
      <link>https://sunxiaochuang.top/posts/%E5%A4%AA%E6%9E%81%E5%9B%BE%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 21 Nov 2019 12:21:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/%E5%A4%AA%E6%9E%81%E5%9B%BE%E6%8A%80%E6%9C%AF%E8%AE%B0%E5%BD%95/</guid>
      <description>前言 本文章介绍该太极图制作过程中所调用的 API 以及 CSS 记录和总结
document.querySelector() 方法：文档对象模型 Document 引用的 querySelector()方法返回文档中与指定选择器或选择器组匹配的第一个 html 元素 Element.如果找不到匹配项,则返回 null let demo = document.querySelector(&#39;#demo&#39;)  innerHTML 是一个属性忘该元素中添加内容 let demo = document.querySelector(&amp;quot;#demo&amp;quot;) demo.innerHTML =2  setTimeout()定时器：该定时器在定时器到期后执行一个函数或指定的一段代码 setTimeout(()=&amp;gt;{ demo.innerHTML = 3 },3000)  setInterval()方法：方法重复调用一个函数或这姓一个代码段,在每次调用之间具有固定的时间延迟 let n =1 setInterval(()=&amp;gt;{ n++ },3000)  String.prototype.substring()方法返回一个字符串在开始索引到结束索引之间的一个子集,或从开始索引直到字符串末尾的一个子集(不包含结束索引) let string = `你好,我是一名前端新人` console.log(string.substring(0,1)) //你  String.prototype.replace()方法：方法返回一个由替换值替换一些或所有匹配的模式后的新字符串。模式可以是一个字符串或者一个正则表达式，替换值可以是一个字符串或者一个每次匹配的都要调用的回调函数。原字符串不会改变 let string = ` 你好,我是一名前端新人 接下来我要加样式了 我要加的样式是 body{ color:red; }`; string = string.replace(&#39;\n&#39;,&#39;&amp;lt;br&amp;gt;&#39;) //换行换成HTML元素里的换行标签 //第一个参数如果不是正则表达式则只会替换一次 string = string.</description>
    </item>
    
    <item>
      <title>算法入门上</title>
      <link>https://sunxiaochuang.top/posts/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E4%B8%8A/</link>
      <pubDate>Mon, 18 Nov 2019 13:51:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E4%B8%8A/</guid>
      <description>1. 用递归实现类似Math.prototype.min()方法:返回一个最小值 这是JS内置的一个方法.先从两个数实现开始,最后实现类似Math.min的方法 当我们调用Math.min()时,默认总会返回一个最小值
两个数返回一个最小值
let min = (numbers)=&amp;gt;numbers[0]&amp;gt;numbers[1]？numbers[1]:numbers[0]; min([2,3]) //2 //简化成——析构赋值 let min = ([a,b])=&amp;gt; a&amp;gt;b?b:a min([2,3]) //2  三个数返回一个最小值
let min2 = ([a,b,c])=&amp;gt; min([a,min([b,c])]) min2([3,4,5]) //3  四个数返回一个最小值
let min3 = ([a,b,c,d]) =&amp;gt; min([a,min2([b,c,d])]) min3([4,5,6,7]) //4  你会发现 min min2 min3是环环相扣的.你可以根据min min2 min3 写出min&amp;hellip;.既然每次调用都是min来计算两个数的大小,如果你学过递归的话并且用递归去写,这个代码量就少的很多
简单实例: 实现1+2+3+4&amp;hellip;+100用for和递归做
//for let num=0; for(let n=1;n&amp;lt;=100;n++){ num+=n; } //5050  //递归:总之就是不满足条件前一直去调用自身函数,满足条件后逐一释放调用自身函数.前者为递,后者为归 let num=0; let add = (n) =&amp;gt;{ if(n&amp;lt;=100){ add((num+=n,++n)) }else{ console.log(num) } } add(1) //5050 只要条件成立就会一直调用自身add()函数,条件满足逐一释放自身函数() //代码优化： let add = (n) =&amp;gt; n&amp;lt;=100?</description>
    </item>
    
    <item>
      <title>JS总结之原型</title>
      <link>https://sunxiaochuang.top/posts/js%E6%80%BB%E7%BB%93%E4%B9%8B%E5%8E%9F%E5%9E%8B/</link>
      <pubDate>Wed, 13 Nov 2019 13:51:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/js%E6%80%BB%E7%BB%93%E4%B9%8B%E5%8E%9F%E5%9E%8B/</guid>
      <description>原型 今天我们谈谈原型,当我们使用对象时,该对象有一个__proto__的属性问的就是它的属性值来自哪里? 我们目前只举例三种 Function Object Array 带你了解过后可以自行推出其他 基于这三种公式 1. 对象.__proto__ === 其构造函数.prototype 例1： let a = {} a的原型就是构造对象函数的prototype a.__proto__ === Object.prototype 2. Object.prototype是所有对象的的直接或间接原型 例2: Function.prototype.__proto__ === Object.prototype 3. 任何函数.__proto__ === Function.prototype 例3：任何函数包含构造函数和被构造出来的函数。 构造函数: Object.__proto__ === Function.prototype Function.__proto__ === Function.prototype Array.__proto__ === Function.prototype 被构造出来的函数： function fn(){} fn.__proto__ === Function.prototype  根据以上的概念和公式,我们可以推出Object,Function,Array的原型以及被构造函数构造出来的对象的原型
1. Object 注意：Object.prototype是所有对象的直接或间接原型。那Object.prototype的原型是什么？是null(是没有的意思) console.log(Object.prototype.__proto__ === null ) //true //对象的构造函数 Object.__proto__ === Function.prototype //公式3 Object.__proto__.__proto__ === Object.prototype //公式3 再看公式2 Object.__proto__.__proto__.__proto__ === null //公式3 再看公式2 看看开头的注意 //对象实例 let a = {} a.</description>
    </item>
    
    <item>
      <title>JS运算符</title>
      <link>https://sunxiaochuang.top/posts/js%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Sat, 09 Nov 2019 10:50:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/js%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>JavaScript运算符 目录
 算术运算符 比较运算符 布尔运算符 二进制运算符 其他运算符
 点运算符 void运算符 逗号运算符   算术运算符 加法( + ) 减法( - ) 除法( / ) 乘法( * ) 求余( % ) 幂( ** ) 递增( ++) 递减( --) 一元负号( - ) 一元正号( - )   注：第一行是二元操作符,第二行是一元操作符。区别在于是有一个还是有两个操作数。例：一元的意思只有一个操作数 +2。递增和递减分前置和后置。区别在于先加减还是后加减
 // 二元操作符 // 例： 1+1 // 一元操作符 // 例: +1 // 前置递增/递减(递增/递减只能用于变量,常量不可用) // 例： let a = 1 ++a --a // 后置递增/递减(递增/递减只能用于变量,常量不可用) // 例： let a = 2 a-- a++  Number 类型运算 let a = 1 let b = 1 console.</description>
    </item>
    
    <item>
      <title>JS 函数的执行时机</title>
      <link>https://sunxiaochuang.top/posts/js-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Sun, 03 Nov 2019 11:10:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/js-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>1. 为何以下代码打印出6个6？ let i=0 for(i=0;i&amp;lt;6;i++){ setTimeout(()=&amp;gt;{console.log(i)},0) } /* 输出： 6 6 6 6 6 6 */   首先 let(块级作用域)定义一个i变量初始值为0。在for里循环,setTimeout()方法是一个定时器，该定时器到期后会执行指定的代码.延迟以毫秒计算1000毫秒=1秒,默认值是0(为0时也不会在第一代码执行。)).   我们首先了解到有一个循环,和一个定时器。在整个环境中i在全局范围内.我们该如何理解最后输出6个6。首先分两个部分,第一代码执行,第二执行其余代码.for循环在第一代码执行但是到包含了setTimeout()，发现它是一个定时器而且延迟为0毫秒在执行,那就放到第二代码执行去,现在剩下的代码执行完毕再说.setTimeout()在第二代码执行.因为在第一代码执行后 i因for值变成6。所以,在第二代码执行时setTimeout函数去调用i时,i的值为6
 什么是第一代码执行：预先先写的,不需要交互点击我没反应
什么是第二代码执行：当我需要交互时(点击时) 点击后3秒有弹窗
所有 你理解了吗？为什么当在第二执行setTimeout时会输出6而不是0 1 2 3 4 5 呢？
2. 当let配合for一起时,结果令人感到正常？ for(let i=0;i&amp;lt;6;i++){ setTimeout(()=&amp;gt;{console.log(i)},0) } /* 输出： 0 1 2 3 4 5 */   为什么let写在for里面结果就不一样呢？主要有个细节,当在第一代码执行setTimeout()时把它放到第二代码执行时i的当前值被保存在setTimeout()函数里了。
 3. 使用递归配合setTimeout()输出0-5 function fn(i){ return i&amp;lt;6?setTimeout(()=&amp;gt;{console.log(i);fn(++i),0)}:i } fn(0) /* 输出： 0 1 2 3 4 5 */   如果你不明白递归先自行了解。如果你知道递归,你就明白每次递时i的值都是不同的。</description>
    </item>
    
    <item>
      <title>JS对象的基本用法</title>
      <link>https://sunxiaochuang.top/posts/js%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 21 Oct 2019 09:10:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/js%E5%AF%B9%E8%B1%A1%E4%B9%8B%E6%95%B0%E7%BB%84/</guid>
      <description>前言：本文章仅仅适合刚入门的 JS 人员.本文章仅仅自身学习需要,把目前所学已知的用文章记录下来，做一次归纳整理,达到自己理解和加强记忆的目的，如有不对,请联系: 460046653@qq.com
 数组(Array) 在 JavaScript 里 Array 对象是构造数组的全局对象.在 JS 里数组也是对象
1. 创建一个数组 1.1 新建 let arr = new Array(&#39;apple&#39;,&#39;xiaomi&#39;) //规范写法 let arr1 = [&#39;apple&#39;,&#39;xiaomi&#39;] //简写  规范写法：需要用到 new 操作符 调用 Array 对象函数来构造一个数组.接收的参数用逗号隔开。
简写：只需要用中括号即可,用逗号隔开每一项
注：当用规范写法时,且参数为数字并参数为一位时,例外
let arr = new Array(3) //这是声明数组的长度为3,内容为empty(空) console.log(arr.length) //3 (length是构造时创造给arr自身的属性)  1.2 转化成数组 1.2.1 split():方法使用指定的分隔符将字符串(string)对象分割成字符串数组。 let arr =&#39;1,2,3&#39;.split(&#39;,&#39;) console.log(arr) //[&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;] let arr1=&#39;123&#39;.split(&#39;&#39;) console.log(arr1) //[&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;]  1.2.2 Array.from():方法从一个类似数组或可迭代对象创建一个新的,浅拷贝的数组实例 console.log(Array.from(&#39;123&#39;)) //类似数组创建一个新的数组。  1.3 合并多个数组.concat()方法 怎么把多个数组合在一起?</description>
    </item>
    
    <item>
      <title>JS对象的基本用法</title>
      <link>https://sunxiaochuang.top/posts/js%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Fri, 18 Oct 2019 14:10:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/js%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>前言  本文章仅仅自身学习需要,把目前所学已知的用文章记录下来，做一次归纳整理,达到理解和加强记忆的目的，如有不对,请联系: 460046653@qq.com
 1. 如果声明一个对象(Object)数据类型？ 什么是对象呢？对象是属性(由属性名和属性值组成一个属性,:隔开)的集合,用大括号括起来.称之为对象(没有属性名和属性值是空对象(null))
//以下是规范写法 let obj = new Object({&#39;属性名&#39;:&#39;属性值&#39;,&#39;属性名&#39;:&#39;属性值&#39;}) //逗号隔开 //以下是简写写法 let obj2 = {&#39;属性名&#39;:&#39;属性值&#39;,&#39;属性名&#39;:&#39;属性值&#39;}  属性名：遵守标识符的规则,可不加引号。其他例外
//如果属性名是数值也不可加引号,但自动转换为字符串 let obj = { 1: &#39;a&#39;, 3.2: &#39;b&#39;, 1e2: true, 1e-2: true, .234: true, 0xFF: true } //它们最终都会变成字符串！！ // obj { // 1: &amp;quot;a&amp;quot;, // 3.2: &amp;quot;b&amp;quot;, // 100: true, // 0.01: true, // 0.234: true, // 255: true // } //不符合标识符 报错 let obj = { 1+2:3, 1a:&#39;1a&#39; } //如果不符合标识符,请加上引号 let obj = { &#39;1+2&#39;:3, &#39;1a&#39;:&#39;1a&#39; }  变量可不可以当成属性名呢？ 答：可以的我们来看代码</description>
    </item>
    
    <item>
      <title>JS的数据类型</title>
      <link>https://sunxiaochuang.top/posts/js%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 16 Oct 2019 14:10:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/js%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>预知： 在本文章中,作者只是把已知的数据类型做一些归类整理,仅供复习参考。
前言  在程序的世界里,数据是很重要的.程序的目的就是为了处理数据.我们会一眼区别出数字不是字母.但是程序是怎么知道的呢？是程序员标明的。计算机才知道这个是数字的,那个是字母对不对?接下来我们看看在JavaScript里有哪些数据类型
 1. 数字(number) 在现实里我们用数字来计算的数在JS里都算数字类型。但是我们常用十进制来计算。在程序还有二进制、八进制、十进制、十六进制。还有正0、负0。它们都是0.还有一些无穷大、正无穷大、负无穷大。以及不是数的数(Not a Number(简称NaN))，在JS里比如0/0它的结果一定不是数但是属于数字类型,接下来我们用代码看看吧
写法
let integer=10 //整数 表示 10 let decimals=10.1 //小数 表示 10.1(如果是10.0会自动忽略0) let binary=0b1010 //二进制 表示 10 let octonary=0o12 //八进制 表示 10 let hex=0xa //十六进 表示 10  特殊值
let positiveNumber = +0 //正0等于0 let negativeNumber = -0 //负0等于0 (有符号意义不同) let positiveInfinity = 1/0 //等于正无穷大 let negativeInfinity = 1/-0 //等于负无穷大 let NotaNumber = 0/0 //等于NaN(不是数的数(Not a Number)))  2. 字符串(string) 电脑是怎么理解我现在写的这句话是字符串而不是数字的？来看下面代码吧</description>
    </item>
    
    <item>
      <title>JS的基本语法</title>
      <link>https://sunxiaochuang.top/posts/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Mon, 14 Oct 2019 11:10:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>1. 什么是表达式和语句？ 在 JavaScript 的里面,如果后面带有&amp;rsquo;;&amp;lsquo;代表这是一条语句。表达式更容易区辨别,一般带有返回值的都可以称为表达式。
var a = 1; //这是一个语句 a + a;//这是一个表达式语句  2. 标识符的规则 在 JavaScript 里面标识符由&amp;rsquo;字母&amp;rsquo;和&amp;rsquo;符号&amp;rsquo;和&amp;rsquo;中文&amp;rsquo;组成.唯一特殊的是标识符开头不能是数字。
var a123; //字母开头 var 中国; //中文开头 var _1; //符号开头 var 123; //数字开头是错的！！！！！！  3. if else 语句 例子：在 JavaScript 里,if else 用作判断条件为真假执行不同语句的。
if(如果今天下雨){ 我就去淋雨 }else{ 我就去下雨 }  本意：if else
if(表达式){ 语句 //为真执行 }else{ 语句 //为假执行 }   if else 只是最简单的用法,某些事情的不单是一个影响因素.
 4. while for 语句 例子:在现实的世界当中,汽车行驶中轮胎不停的转动.因何而动,因何而停？ 在 JavaScript 世界里,while 和 for 控制轮胎.</description>
    </item>
    
    <item>
      <title>css知识总结</title>
      <link>https://sunxiaochuang.top/posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 09 Sep 2019 10:10:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      <description> 1.浏览器渲染原理  浏览器在得到服务器的响应之后,会先根据HTML去渲染成一个结构图HTML树(DOM)所有的标签具有父子关系。 HTML标签是最大的,其次是head和body两个大儿子,依次渲染。 CSS会构建成CSS树(CSSOM)。CSS也是根据标签所具备的属性。在这里body是最大的。如果body所带的属性 如果标签是共有的属性,儿子会继承父子所带的属性 这时会将HTML CSS 合并在一起成为渲染树(render tree) Layout布局然后是计算标签的大小以及位置渲染布局。(文档流、盒模型、计算大小和位置) paint绘制接下来是绘制标签的背景颜色、边框、字体颜色、阴影的(所有美化属性在渲染) compose最后一步是层叠的合成,(例如拍照：就是把背景和人合成跟这个概念是一样的)  CSS 动画的两种做法（transition 和 animatioin） 1. transition 过渡 作用:补充中间帧
 语法： transition:属性名 时长 过渡方式 延迟 transition：left 200ms linear 可以用逗号分隔两个不同属性 transition:left 200ms,top 400ms 可以用 all 代表所有属性 transition:all 200ms 时长单位只有 s 和 ms 过渡方式有：linear|ease|ease-in|ease-out|ease-in-out|cubic-bezier|step-start|step-end|steps  2. animation 动画  缩写语法： animation:时长|过渡方式|延迟|次数|方向|填充模式|是否暂停|动画名； 时长：1s 或者 1000ms 过渡方式：跟 transition 取值一样，如 linear 次数：3 或者 2.4 或者 infinite 方向：reverse|alternate|alternate-reverse 填充模式：none|forwards|backwards|both 是否暂停：paused|running 以上所有属性都有对应的单独属性。  </description>
    </item>
    
    <item>
      <title>浅析 URL</title>
      <link>https://sunxiaochuang.top/posts/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Sat, 07 Sep 2019 14:10:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/%E6%B5%85%E6%9E%90url/</guid>
      <description>URL (统一资源定位符) 
1. URL 包含哪几部分，每部分分别有什么作用  1. 协议：规定请求以及响应具体过程的实现带有s则数据会被加密 2. 域名：由域名管理系统(Domain Name System)管理主要方便于人类记忆(相对于IP),跟公网IP绑定 3. 路径：当前路径页面 4. 参数：搜索关键字 5. 锚点：当有锚点时,浏览器可视窗口到元素ID为vue   上方图中的意思是：你我遵循 https 协议,我要访问 xiedaimala.com 去路径为 search 提供的搜索功能,搜索关键字“前端”。这是请求的部分。 xiedaimala.com 服务器会遵循 https 协议来解析请求。并且响应给我,然后浏览器会根据锚点去搜哪个元素的 ID 相等锚点
 2. DNS 的作用是什么，nslookup 命令怎么用  DNS的作用在于,当用户输入地址 xiedaimala.com,会先到DNS服务器询问xiedaimala.com 这个域名相对的IP 是多少? DNS解析后响应一个的IP。 nslookup命令是查询域名相对的IP是什么例如：在命令行输入nslookup xiedaimala.com 会得到这个域名的IP  3. IP 的作用是什么，ping 命令怎么用  IP分公网IP和内网IP。公网IP是你能上网的凭证，公网IP的作用是链接其他公网IP的身份凭证,例如：你要访问 baidu.com。首先你得有一个公网IP(由网络服务商提供服务)。baidu.com就知道是谁来访问啦。内网IP由路由 器分配的,管理终端一般由198.168.x.x开头 ping 命令要在命令行内配合域名/IP使用.例如： ping baidu.com 。主要目的是否能通过IP链接到主机。过程 中会发送数据包,主机是否由响应  4. 域名是什么，分别哪几类域名  要说域名是什么，得先说起IP。IP的存在是给每个终端分配的一个名字，IP是一串数字。但是一串数字不利于人类 记忆以及传播更不容易发生联想。域名是由字符组成显然优于数字。域名对应着IP。当我们访问某个域名时,也可以说访 问某个IP。 分别有顶级域名、一级域名以及二级域名例如：.</description>
    </item>
    
    <item>
      <title>JavaScript的诞生</title>
      <link>https://sunxiaochuang.top/posts/javascript%E8%AF%9E%E7%94%9F/</link>
      <pubDate>Tue, 03 Sep 2019 20:10:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/javascript%E8%AF%9E%E7%94%9F/</guid>
      <description>JavaScript 
1. 1994年底一家名为网景公司发布第一个版本的网页浏览器Mosaic Netscape 0.9。 四个月内抢占当时浏览器市场份额四分之三,成为90年代互联网的主要浏览器。当时的网页只是静态页面的浏览，没有交互能力。网景预见到未来网络需要变得更加多态。 
2. 1995.4 身为网景的程序员布兰登·艾克目标是把Scheme语言嵌入浏览器内。但在这之前浏览器就已经支持java。内部争论中，网景决定发明一种跟Java在语法上有相似的语言，这个决策导致把Perl、Python、Tcl或Scheme排除在外。 
3. 1995.5 艾克受命于此，仅仅花了10天时间就把原型设计出来了。最初命名为Mocha,9月分更名为LiveScript。同年12月改为JavaScript(当时网景公司跟Sun公司组成的开发联盟为了让这门语言搭上Java这个编程语言的热度)当时Sun公司大肆宣传Java&amp;rdquo;一次编写 到处运行&amp;rdquo; 
4. 由于当时仓促的时间设计，语言的一些细节考虑的不够严谨，后来导致很长一段时间，JavaScript写出来的程序混乱不堪。总的来说，他的设计思路借鉴以下语言:  (1) 借鉴C语言的基本语言 (2) 借鉴Java语言的数据类型和内存管理 (3) 借鉴Scheme语言，将函数提升到”第一等公民(first class)“的地位 (4) 借鉴Self语言，使用基于原型(prototype)的继承机制  5. 标准化  在1996年11月，网景公司向ECMA(欧洲计算机制造协会)提交语言标准。 1997年6月，ECMA以JavaScript语言为基础制定了ECMAScript标准规范ECMA-262。 JavaScript成为了ECMAScript最著名的实现之一   所以，Javascript 语言实际上是两种语言风格的混合产物&amp;mdash;-（简化的）函数式编程+（简化的）面向对象编程。这是由 Brendan Eich（函数式编程）与网景公司（面向对象编程）共同决定的。
 JavaScript 的十个设计缺陷  由于上文得知,JavaScript是在十天内设计的。所以因为时间的原因造成的一些缺陷. 上文提到JavaScript语言是函数式+面向对象的混合产物,这是在那个时代是属于先例开创先河了,得自己摸索着 前进.还有由于竞争的环境,当时微软公司推出自己的脚本语言Jscript,由此网景公司在当时处于不利于自己的 处境,先下手强,申请JavaScript国际标准,打压微软.1997年6月第一个国际标准ECMA-262正式版权(). 你想象一下这个过程当中从设计到标准,时间太快了.这门语言还没有经过市场的检验国际标准就问世了,当然这 也是迫不得己,相比之下其他语言将近几十年的市场检验,才发布国际标准.  1. 不适合开发大型程序  Javascript没有名称空间（namespace），很难模块化；没有如何将代码分布在多个文件的规范； 允许同名函数的重复定义，后面的定义可以覆盖前面的定义，很不利于模块化加载。   相对于 C 语言，一个函数名只能出现一次。
 2. 非常小的标准库  Javascript 提供的标准函数库非常小，只能完成一些基本操作，很多功能都不具备。   怎么形容呢，大概就是你活在原始部落(当时 JavaScript),跟现代化城市的对比。</description>
    </item>
    
    <item>
      <title>css基础</title>
      <link>https://sunxiaochuang.top/posts/css%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Thu, 22 Aug 2019 14:10:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/css%E5%9F%BA%E7%A1%80/</guid>
      <description>css 基础 文档流(normal flow) 文档流里有块、内联以及内联块
1. block(块)：可自行设定宽度(width),高度(height)(不设定情况下,由内部文档流决定)并且独占一行 2. inline(内联)：由内容限定宽度,高度由 line-height 间接确定(跟 height 无关).跟其他内联占满一行(多余另起一行) 3. inline-block(内联块)：可自行设定宽度以及高度,但具有内联特性(不会独占一行)又具有块的特性(块不可分离)  注意要点: width and height 默认是：auto(自动伸缩); width 不可写：100%(会有 bug); 当内容大于宽度或者高度时,会发生溢出。overflow属性默认:visible(显示溢出部分)。hidden(溢出部分隐藏),auto(根据实际宽度和宽度出现滚动条),scroll(不管是否溢出直接除滚动条).当前是overflow:auto; 块级元素里没有content,height为0  脱离文档流 会使当前容器脱离父容器,父容器的宽高度计算则忽略有以下代码的子容器
position:absolute/fixed; or float:left;
盒模型 content padding border margin 共有 4 层。内容+内边距+边框+外边距
两种盒模型 1. content box(内容盒) 内容就是盒模型的边界 2. border box(边框盒) 边框就是盒模型的边界 margin 合并 当上下都有 margin 时(没有 border 等等),外边距会合并。
 父子合并(最上父子 margin 和最下父子 margin) 兄弟合并(相邻的 margin 也会合并)   以上情况都是在 Margin 和 Margin 之间没有其他属性存在,才会合并</description>
    </item>
    
    <item>
      <title>vim命令参考笔记</title>
      <link>https://sunxiaochuang.top/posts/vim%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83/</link>
      <pubDate>Tue, 20 Aug 2019 10:08:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/vim%E5%91%BD%E4%BB%A4%E5%8F%82%E8%80%83/</guid>
      <description> 切记！切记！ 一切命令皆在英文状态输入！ 在命令行内输入 vimtutor 自带的 vim 教程
vim 的基本操作 进入：vi or vim 一&amp;gt; enter vi 文件名 enter or vim 文件名 enter 进入文件编辑
退出：ESC 一&amp;gt; : 一&amp;gt; q 一&amp;gt; enter 即可  q! 强制退出：丢失文件的改动 wq 保存退出  编辑：在普通模式下  i &amp;amp;在当前光标下,即会进入编辑模式/插入模式 I 则会在行的开头进行编辑模式  a 在当前下一个光标,即会进入编辑模式/插入模式 A 则会在行尾的进行编辑模式  移动：  数字 w (number word) 移动几个单词开始处 数字 e (number )移动几个单词的结尾处  删除：  在普通模式下 x 就会删除当前光标后面一个 dd 删除一行(可选参数：number delete delete 意味着连续删除几行) dw (delete a word) 删除单词 or 一串中文字符,须在单词 or 一串中文字符的起始处,删除后会到一下单词起始处 db (delete back)删除单词 or 一串中文字符,须在单词 or 一串中文字符的结尾处 di+() or {} (delete in () or {}) 删除 {} or () 内的字符,须在 () or {} 内 da+() or {} (delete at () or {}) 删除包括 () or {} 的字符,须在 () or {} 内 dit (delete in tag 删除标签内的内容) dat (delete at tag 删除标签包含内容) d\$ 从当前光标删到航末尾 de 从当前光标删到单词结尾 d number w (delete number word) 删除多个单词  删除修改:  ci+ t or () or {} or &amp;lt;&amp;gt; (change in tag or () or {} or &amp;lt;&amp;gt;) 删除&amp;lt;&amp;gt; &amp;lt;/&amp;gt; 包含的内容并且进入 insert 模式 ca+ t or () or {} or &amp;lt;&amp;gt; (change at tag or () or {} or &amp;lt;&amp;gt;) 删除标签包含你内容，并且进入 insert 模式  撤销：在普通模式下 按住 u 即会撤销上一次修改  number u (number undo 撤销多次) U 可撤销整行的修改  还原：在普通模式下 按住 ctrl+r 就会还原上一次撤销  number ctrl+r (可多次还原上一次修改)  复制：按 v 进入复制选取模式,选择 按 y 可复制 粘贴：在普通模式下,p 可直接到下方粘贴。  P 是粘贴到上方  快速上下翻页  ctrl+d (向下翻半页) ctrl+u (向上翻半页)  光标移动  k (上行键) l (右移) j (下行键) h (左移)  vim 有四种模式  按 ESC (处于正常模式 normal) 按 i (处于编辑模式 insert) 按 : (处于命令行模式) 按 v (处于复制选取模式)  基本单词  quit (退出) write/read (写/读) yank (复制) paste (粘贴) delete (删除) change (修改) line (一行) find (查找) word (单词) forward/backward (前进/后退) up/down (上/下) insert/append (插入/附加) undo (撤销) redo (还原)  </description>
    </item>
    
    <item>
      <title>HTML 重难点</title>
      <link>https://sunxiaochuang.top/posts/html%E9%87%8D%E9%9A%BE%E7%82%B9/</link>
      <pubDate>Mon, 19 Aug 2019 12:58:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/html%E9%87%8D%E9%9A%BE%E7%82%B9/</guid>
      <description>a 标签 1. a 标签属性  href  网址：href=&amp;ldquo;https://www.google.com&amp;quot; or href=&amp;ldquo;http://www.google.com&amp;quot; or //google.com 路径：href=&amp;ldquo;/a/b/c.html&amp;rdquo; 伪协议：href=&amp;ldquo;javascript:alert(1);&amp;rdquo; (value 要小写,点击会执行 javascript 代码) or javascript:;相对于页面来说,不会有视觉上的刷新 ID 当某个标签有 id 之后.例 :id=&amp;ldquo;xx&amp;rdquo; href=&amp;ldquo;#xx&amp;rdquo;.会定位到 id 为 xx mailto：href=&amp;ldquo;mailto:460046653@qq.com&amp;rdquo; ; tel：href=&amp;ldquo;tel:11 位电话号&amp;rdquo; ; 点击时会打电话    总结：可跳转到其他页面,可跳转到子页面，可跳转到邮箱、电话.
  target
 _blank :target 取值为:_blank
空白页面打开
 _top ：在 iframe src 属性链接的页面里,a 标签 target 设置_top 会在最顶页面打开
 _parent：在父级页面打开跳转页面
 _self：target 取值为:_blank当前页面打开
 window.name:target=&amp;ldquo;xx&amp;rdquo; 指定窗口(如果没有会新建一个窗口(在空白页))为打开
 iframe.name:指定在 iframe 标签打开页面：当 iframe 属性 name 为：xx。 a 属性 target=&amp;ldquo;xx&amp;rdquo; 则会在 iframe 页面中打开跳转页面</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>https://sunxiaochuang.top/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Mon, 19 Aug 2019 10:00:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description> HTML常用标签 1. a标签的用法  最基本的属性是跳转到其他页面 达到target有_blank _top _parent _self herf:可以设置为网址如：google.com 子页面路径等等。可以跳到邮箱 还有id设置为#点击到某某id。设置为#。点击可以到页面top a还可以下载当前页面   2. img标签的用法  最基本的用于图片展示，可以设置图片的大小，如果图片加载失败可以又文字代表图片含义   3. table标签的用法  用作于表格展示。是具有网格的标签。使用table时，默认每个单元格之间有间隙。设置table的collapse   4. 其他感想  感觉看完视频，跟着敲完代码。标签和一些用法就会忘记。我觉得单单这样写blog还是不够。希望接下来继续总结归纳  </description>
    </item>
    
    <item>
      <title>html入门笔记1</title>
      <link>https://sunxiaochuang.top/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Sun, 18 Aug 2019 12:58:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
      <description>  1. HTML 是谁发明的 蒂姆·伯纳斯-李(简称李爵士)
2. HTML 起手应该写什么 emmet 插件：英文状态下输入“!” 回车 or tab 即可
3. 常用有的表章节标签：  H1-H6(数字越小字体越大) section(章、节) article(文章) main(主要的) aside(旁边的) p(段落) header(头部) footer(脚部) div(划分 块级元素)  4. 全局属性有哪些？  class (引用 css 以.开头的样式) contenteditable(在浏览器可以编辑) hidden(隐藏) id(主要在 js 里,调取标签可用) style(内联样式) tabindex(增加用户体验多元化) title(增加可读性)  5. 常用的内容标签有哪些，分别是什么意思  a(anchor 超链接)：用作跳转其他页面 ol+li(ordered list 有序列表)：带有数字的列表 ul+li(unordered list 无序列表)：以·开头的列表 dl+dt+dd(description list 描述列表) pre(输出默认格式) hr(水平线) br(回车) em(强调语气,以斜体展示) strong(重要强调,以加粗展示) code(代码标签) quote(引用) blockquote(独自占一行块引用)  </description>
    </item>
    
    <item>
      <title>hugo从入门到建站</title>
      <link>https://sunxiaochuang.top/posts/hugo%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%BB%BA%E7%AB%99/</link>
      <pubDate>Sun, 18 Aug 2019 12:58:36 +0800</pubDate>
      
      <guid>https://sunxiaochuang.top/posts/hugo%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%BB%BA%E7%AB%99/</guid>
      <description>hugo 快速创建 blog 教程 第一步：下载 hugo 下载地址
1. 选择文件名为：hugo-版本号-系统-32bit/64/.zip 根据系统选择对应的
例：windows-64 位：hugo_0.57.2_Windows-64bit.zip
2. 解压文件到你所知道的目录(路径你要知道,等下要用)。你会得到一个 hugo.exe 文件 3. 把执行命令放到 path 变量,先复制 hugo.exe 的路径;右键桌面我的电脑-属性-高级系统设置-环境变量-下面框框里(系统变量)-双击 Path-新建-粘贴-有确定就点确定。 自检：重新打开 cmder(相关命令行工具)输入 hugo version(你会得到一个版本号)  如果没有成功重新检查以上步骤!
 恭喜你，下载完成！ 
第二步：利用 hugo 快速搭建 blog 框架 1. 创建建站根一个目录() 2. 该目录在 cmder()打开 3. 地址栏输入网址,回车进入;点击 quick start： hugo 官网 4. 从 step2 开始 复制-打开 cmder(一定要在第一步创建的目录里)-粘贴-回车 5. step3 复制-打开(cmder)-粘贴-回车 本地仓库初始化和下载自带模板 6. step4 复制-打开(cmder)-粘贴-回车 创建 blog 目录(posts 目录存放 blog)和第一个 blog 文件以.md 为后缀 可以自己写点什么，注意时间不要来自未来！</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://sunxiaochuang.top/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sunxiaochuang.top/archives/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>